# --- 모듈 가져오기 (Importing modules) ---
# 파이썬은 '모듈'이라는 미리 만들어진 코드 묶음을 가져와서 사용할 수 있습니다.
# import 키워드는 다른 파일에 있는 기능을 현재 파일로 불러오는 역할을 합니다.

# 'random' 모듈은 난수(무작위 수)를 생성하거나 리스트에서 임의의 항목을 선택하는 등
# 무작위와 관련된 다양한 함수를 제공합니다. 이 게임에서는 단어 목록에서 무작위로 단어를 선택하기 위해 사용합니다.
import random

# 'time' 모듈은 현재 시간 조회, 프로그램 실행 잠시 멈추기 등
# 시간과 관련된 기능을 제공합니다. 이 게임에서는 60초 제한 시간을 측정하기 위해 사용합니다.
import time


# --- 전역 변수 (Global Variables) ---
# 함수 바깥에 선언된 변수를 '전역 변수'라고 하며, 코드 어디에서든 접근할 수 있습니다.
# 보통 프로그램 전체에서 사용되는 설정값이나 데이터를 저장할 때 사용합니다.
# 변수 이름을 모두 대문자로 쓰는 것은, 이 변수가 프로그램 실행 중에 바뀌지 않는 '상수(Constant)'라는 것을
# 다른 개발자에게 알려주는 파이썬의 관례입니다.

# WORDS: 게임에 사용될 영어 단어들을 '리스트(list)' 형태로 저장합니다.
# 리스트는 대괄호 `[]`로 만들며, 여러 개의 항목(여기서는 문자열)을 순서대로 담을 수 있는 자료구조입니다.
# 예: fruits = ["사과", "바나나"] -> fruits[0]는 "사과"
WORDS = [
    "apple",
    "river",
    "candle",
    "mountain",
    "window",
    "guitar",
    "orange",
    "planet",
    "forest",
    "summer",
]

# TIME_LIMIT: 게임의 제한 시간을 초 단위로 저장하는 변수입니다.
# 숫자 60을 코드 여러 곳에 직접 쓰는 것보다, 이렇게 변수로 만들어두면
# 나중에 제한 시간을 90초나 120초로 바꿀 때 이 한 줄만 수정하면 되므로 관리가 편합니다.
TIME_LIMIT = 60


# --- 주 게임 로직을 담은 함수 정의 ---
# 'def'는 'define(정의하다)'의 줄임말로, 새로운 함수를 만들 때 사용합니다.
# 함수는 특정 작업을 수행하는 코드 묶음입니다. 이렇게 코드를 함수로 묶어두면
# 필요할 때마다 함수 이름(여기서는 'main')을 불러 재사용할 수 있고, 코드의 구조가 명확해집니다.
def main():
    # --- 게임 시작 안내 ---
    # print() 함수는 괄호 안의 내용을 화면(콘솔)에 출력합니다.
    # 문자열은 따옴표(')나 큰따옴표(")로 감싸서 표현합니다.
    print("Typing Game - you have 60 seconds.")
    print("Type the word shown and press Enter.")
    print("Press Enter to start.")

    # input() 함수는 사용자로부터 키보드 입력을 기다립니다.
    # 사용자가 무언가를 입력하고 Enter 키를 누르면, 그 입력 내용이 문자열로 반환됩니다.
    # 여기서는 반환값을 따로 변수에 저장하지 않고, 단지 사용자가 Enter를 누를 때까지
    # 프로그램을 잠시 멈추는 용도로만 사용합니다.
    input()

    # --- 게임 루프(Loop)를 위한 변수 초기화 ---
    # time.time() 함수는 1970년 1월 1일 0시 0분 0초부터 현재까지 흐른 시간을 초 단위의 실수로 반환합니다.
    # 이 값을 start 변수에 저장하여 게임 시작 시각을 기록합니다.
    start = time.time()

    # correct 변수는 사용자가 맞힌 단어의 개수를 세기 위한 변수입니다.
    # 게임이 시작될 때는 아직 맞힌 단어가 없으므로 0으로 초기화합니다.
    correct = 0

    # --- while 반복문: 게임의 핵심 ---
    # while은 뒤에 오는 조건이 참(True)인 동안 코드 블록(아래 들여쓰기 된 부분)을 계속해서 반복 실행합니다.
    # 조건: time.time() - start < TIME_LIMIT
    # - time.time(): 현재 시각
    # - start: 게임 시작 시각
    # - time.time() - start: 게임이 시작된 후 흐른 시간
    # 즉, '흐른 시간이 제한 시간(60초)보다 작은 동안' 계속 반복하라는 의미입니다.
    while time.time() - start < TIME_LIMIT:
        # random.choice(WORDS)는 WORDS 리스트에서 무작위로 단어 하나를 선택하여 반환합니다.
        # 선택된 단어를 target 변수에 저장합니다. 이 단어가 이번 턴에 사용자가 맞춰야 할 목표 단어입니다.
        target = random.choice(WORDS)

        # f-string: 문자열을 만드는 편리한 방법입니다. 문자열 앞에 'f'를 붙이고,
        # 중괄호 `{}` 안에 변수 이름을 넣으면 그 변수의 값이 문자열에 포함됩니다.
        # 예: name = "홍길동" -> print(f"안녕하세요, {name}님!") -> "안녕하세요, 홍길동님!" 출력
        print(f"Word: {target}")

        # input(">> ")은 화면에 ">> "를 먼저 보여주고 사용자 입력을 기다립니다.
        # .strip()은 문자열의 양쪽 끝에 있는 공백(스페이스, 탭, 엔터 등)을 제거하는 '메서드'입니다.
        # 사용자가 실수로 ' apple '처럼 입력해도 'apple'로 처리해줍니다.
        attempt = input(">> ").strip()

        # --- 시간 초과 재확인 ---
        # 사용자가 단어를 입력하는 동안에도 시간은 계속 흐릅니다.
        # 만약 단어를 입력하고 Enter를 누른 시점에 이미 60초가 지났다면,
        # 그 단어는 정답으로 처리하지 않고 즉시 루프를 빠져나가야 합니다.
        # 그래서 루프 맨 위에서 한 번, 사용자 입력 직후에 또 한 번 시간을 확인합니다.
        if time.time() - start >= TIME_LIMIT:
            # break는 현재 실행 중인 반복문(여기서는 while 루프)을 즉시 중단하고 빠져나갈 때 사용합니다.
            break

        # --- 정답 확인 ---
        # if는 '만약 ~라면'이라는 의미의 조건문입니다.
        # attempt == target: 사용자가 입력한 단어(attempt)와 목표 단어(target)가 같은지 비교합니다.
        # 같다면(True) 아래 들여쓰기 된 코드를 실행하고, 다르면(False) 그냥 지나칩니다.
        if attempt == target:
            # correct += 1은 correct = correct + 1 과 똑같은 표현입니다.
            # 기존 correct 변수의 값에 1을 더해서 다시 저장하라는 의미입니다.
            # 사용자가 단어를 맞혔으므로 점수를 1 올립니다.
            correct += 1

    # --- 게임 종료 및 결과 출력 ---
    # while 루프가 끝나면 (즉, 60초가 지나면) 이 부분이 실행됩니다.
    # 최종적으로 흐른 시간을 다시 계산하여 elapsed 변수에 저장합니다.
    elapsed = time.time() - start
    # f-string을 사용해 최종 결과를 출력합니다.
    # {elapsed:.1f}는 elapsed 변수의 값을 출력하되, 소수점 첫째 자리까지만 보여달라는 의미의 서식 지정입니다.
    # 예: 61.2834...초가 61.3초로 깔끔하게 출력됩니다.
    print(f"\nTime's up! You typed {correct} word(s) correctly in {elapsed:.1f} seconds.")


# --- 스크립트 실행 지점 ---
# 이 코드가 'python typing_game_v1.py'처럼 직접 실행될 때만 아래의 코드 블록을 실행하라는 의미의 특수한 조건문입니다.
# 만약 다른 파이썬 파일에서 이 파일을 'import'해서 사용할 경우에는 아래 코드가 실행되지 않습니다.
# 이렇게 하면 파일이 직접 실행될 때와 모듈로 사용될 때의 동작을 구분할 수 있어,
# 파이썬 프로그램을 만들 때 거의 항상 사용하는 관례적인 구조입니다.
if __name__ == "__main__":
    # 위에서 정의한 main() 함수를 호출하여 게임을 시작합니다.
    main()
